name: Deploy preview
on:
  workflow_call:
    inputs:
      app_name:
        description: The name of the application
        type: string
        required: true
      aws_role:
        description: AWS role to assume during deployment
        type: string
        required: true
      aws_eks_role:
        description: AWS role that is used to deploy on EKS
        type: string
        required: true
      aws_region:
        description: The AWS region where cluster is located
        type: string
        required: true
      cluster_name:
        description: The name of the EKS cluster on which to deploy the preview
        type: string
        required: true
      docker_build_args:
        description: Build arguments to pass to the Docker build
        type: string
        required: true
    secrets:
      system_token:
        description: GitHub token
        required: true

    outputs:
      preview_url:
        value: ${{ jobs.setup.outputs.preview_url }}
        description: The URL of the deployed preview

permissions:
  id-token: write
  actions: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.print-preview-url.outputs.preview_url }}
      pr_name: ${{ steps.sanitize_pr_name.outputs.PR_NAME }}
    steps:
      - name: Sanitize pull request Name
        id: sanitize_pr_name
        shell: bash
        run: |
          echo "PR_NAME=pr-$(echo "$GITHUB_REF" | awk -F / '{print $3}')" >> $GITHUB_OUTPUT

      - name: Print preview URL
        id: print-preview-url
        shell: bash
        run: echo "preview_url=https://${{ steps.sanitize_pr_name.outputs.PR_NAME }}.preview-new.dignio.dev" >> $GITHUB_OUTPUT

  build_and_push:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws_role }}
          role-session-name: GithubActionsSession
          aws-region: ${{ inputs.aws_region }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: metadata
        uses: docker/metadata-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          images: |
            ${{ env.ECR_REGISTRY }}/${{ inputs.app_name }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=preview-${{ needs.setup.outputs.pr_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          provenance: false
          build-args: ${{ inputs.docker_build_args }}
          # Add cache-from to speed up the build
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  deploy_on_eks:
    runs-on: ubuntu-latest
    needs: [setup, build_and_push]
    steps:
      - name: Checkout Kubernetes repo
        uses: actions/checkout@v4
        with:
          repository: dignio/kubernetes
          ref: DEVEX-356-fix-preview-functionality
          sparse-checkout: |
            argo/overlays/preview/app
            argo/base/prevent-ui
          path: manifests
          token: ${{ secrets.system_token }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws_role }}
          role-session-name: GithubActionsSession
          aws-region: ${{ inputs.aws_region }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.30.0"

      - name: Generate kubeconfig for EKS and set as ENV
        shell: bash
        run: |
          aws eks update-kubeconfig --name=${{ inputs.cluster_name }} --region=${{ inputs.aws_region }} --role-arn=${{ inputs.aws_eks_role }} --kubeconfig="./kubeconfig"

          kubeconfig=$(cat ./kubeconfig)

          echo "KUBECONFIG<<EOF" >> $GITHUB_ENV
          echo "$kubeconfig" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate to the EKS cluster
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ env.KUBECONFIG }}

      - name: Install Kustomize
        shell: bash
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          mv kustomize /usr/local/bin/

      - name: Update Kustomize manifests
        shell: bash
        working-directory: manifests/argo/overlays/preview/app
        run: |
          sed -i "s/pr-placeholder/${{ needs.setup.outputs.pr_name }}/g" routes.yaml
          kustomize edit set namesuffix -- -${{ needs.setup.outputs.pr_name }}
          kustomize edit set image ${{ inputs.app_name }}=${{ needs.build_and_push.outputs.metadata.tags }}

      - name: Deploy preview to EKS
        shell: bash
        working-directory: manifests/argo/overlays/preview/app
        run: |
          kubectl apply -k .
