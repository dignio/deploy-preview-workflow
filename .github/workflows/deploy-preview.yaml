name: Deploy preview

on:
  workflow_call:
    inputs:
      app_name:
        description: The application name. Use the same name as the Github and ECR repository.
        required: true
        type: string
      service_type:
        description: This is the service type to be used while generating manifests.
        required: true
        type: string
        default: webservice
      port:
        description: This is the application port number.
        required: true
        type: number
      aws_role:
        description: The role used to grant access to AWS
        required: true
        type: string

      # Optional inputs goes here
      app_name_postfix:
        description: Postfix the app name if this workflow is being used for different things. I.e. two different docker builds.
        required: false
        type: string
      docker_build_args:
        description: By using this you can add multi line build args to docker
        required: false
        type: string
      dockerfile:
        description: The path to your dockerfile. Defaults to Dockerfile.
        required: false
        type: string
        default: Dockerfile
      path:
        description: This is the index route to the application.
        required: false
        type: string
        default: /
      fargate:
        description: If the deployment should use fargate
        required: false
        type: boolean
        default: true
      override_hostname:
        description: Allows choosing another hostname for previews. Example- <override_hostname>_previews.dignio.dev
        required: false
        type: string

    # Secrets
    secrets:
      github_app_private_key:
        description: The github app private key to be used for the preview link on PR generation
        required: true

    outputs:
      preview_url:
        description: The full preview URL
        value: ${{ jobs.build_push_deploy.outputs.preview_url }}


# Permissions needed to run this workflow and the actions provided
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  id-token: write
  actions: write
  contents: read

# Predefined environment variables used as default values
env:
  REGION: eu-north-1
  NAMESPACE: previews
  INSTANCE: previews
  UTILITIES: .dignio-workflows/utilities
  CLUSTER_NAME: dev-k8s

jobs:
  build_push_deploy:
    name: Build and push image to ECR
    if: github.event.action != 'closed'
    # Prevents a workflow run from failing when a job fails
    continue-on-error: true
    runs-on: ubuntu-latest

    outputs:
      preview_url: "https://${{ steps.app_name.outputs.full_name }}.preview.dignio.dev"

    steps:
      # ===  Check out the current repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # ===  Check out dignio workflow repo for the utilities folder
      - name: Checkout dignio/workflow repository
        uses: actions/checkout@v3
        with:
          ref: PLAT-741-override-hostname-in-previews
          repository: dignio/workflows
          path: ".dignio-workflows"

      # === github.head_ref has to be used to get the branch name while in PR state
      - name: Branch name to URL friendly string
        uses: dignio/letter-case-action@v1
        id: letter_case
        with:
          string: ${{ github.head_ref }}

      # ===  Get the latest git short sha
      - name: Get the git short id
        id: short_id
        run: |
          sha=$(cut -c 1-7 <<< ${{ github.event.pull_request.head.sha }})
          echo "::set-output name=sha::$sha"

      # === Create the full app name for docker images and manifests
      - name: Create full app name
        id: app_name
        run: bash ${{ env.UTILITIES }}/create-full-app-name.sh "${{ inputs.app_name }}" "${{ inputs.app_name_postfix }}" "${{ inputs.override_hostname }}" "${{ steps.letter_case.outputs.kebab }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws_role }}
          role-session-name: GithubActionsSession
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.app_name }}
        with:
          file: ${{ inputs.dockerfile }}
          push: true
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.INSTANCE }}-${{ inputs.app_name_postfix }}-${{ steps.app_name.outputs.full_name }}-latest
          cache-to: type=inline
          build-args: ${{ inputs.docker_build_args }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.INSTANCE }}-${{ inputs.app_name_postfix }}-${{ steps.app_name.outputs.full_name }}-latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.INSTANCE }}-${{ inputs.app_name_postfix }}-${{ steps.app_name.outputs.full_name }}-${{ steps.short_id.outputs.sha }}

      - name: Deploy the service to Kubernetes
        uses: dignio/deploy-service@v3
        with:
          app_name: ${{ steps.app_name.outputs.full_name }}
          service_type: ${{ inputs.service_type }}
          cluster_name: ${{ env.CLUSTER_NAME }}
          instance: ${{ env.INSTANCE }}
          namespace: ${{ env.NAMESPACE }}
          docker_image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.app_name }}:${{ env.INSTANCE }}-${{ inputs.app_name_postfix }}-${{ steps.app_name.outputs.full_name }}-${{ steps.short_id.outputs.sha }}
          aws_region: ${{ env.REGION }}
          aws_role: ${{ inputs.aws_role }}
          replicas: 1
          port: ${{ inputs.port }}
          container_port: ${{ inputs.port }}
          fargate: ${{ inputs.fargate }}

      # === This will run a kubectl request to
      # 1. fetch the index of the preview host to check the existence
      # 2. if the host do not exist, patch the ingress with the new host
      - name: Add the service to the preview ingress
        run: bash ${{ env.UTILITIES }}/add-host-to-preview-ingress.sh ${{ env.NAMESPACE }} ${{ steps.app_name.outputs.full_name }} ${{ inputs.port }} ${{ inputs.path }}

      - name: Check if the preview URL is ready
        run: bash ${{ env.UTILITIES }}/is-preview-host-ready.sh ${{ steps.app_name.outputs.full_name }} ${{ inputs.path }}

      # === Create a GitHub IAT token for the Dignio app.
      # This is kind of stupid because the only reason we're doing
      # this is to get a Dignio icon on the Preview check. Still,
      # it'll look great.
      - name: Create GitHub IAT token
        uses: cybozu/octoken-action@v1
        id: create-iat
        with:
          github_app_id: 100263
          github_app_private_key: ${{ secrets.github_app_private_key }}
          target_account: dignio

      - name: Create a commit status with the Deploy Preview URL
        uses: octokit/request-action@v2.x
        id: create_commit_status
        with:
          name: "${{ steps.app_name.outputs.full_name }} deploy preview"
          description: Deploy Preview ready! Click Details to browse to it.
          context: "Preview - ${{ steps.app_name.outputs.full_name }}"
          owner: dignio
          repo: ${{ github.event.repository.name }}
          state: success
          accept: application/vnd.github.v3+json
          route: POST /repos/{owner}/{repo}/statuses/{sha}
          target_url: https://${{ steps.app_name.outputs.full_name }}.preview.dignio.dev
          sha: ${{ github.event.pull_request.head.sha }}
        env:
          GITHUB_TOKEN: ${{ steps.create-iat.outputs.token }}

  # === This is the teardown the preview process
  teardown:
    name: Teardown the preview
    if: github.event.action == 'closed'
    # Prevents a workflow run from failing when a job fails
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      # ===  Check out dignio workflow repo for the utilities folder
      - name: Checkout dignio/workflow repository
        uses: actions/checkout@v3
        with:
          ref: PLAT-741-override-hostname-in-previews
          repository: dignio/workflows
          path: ".dignio-workflows"

      # === github.head_ref has to be used to get the branch name while in PR state
      - name: Branch name to URL friendly string
        uses: dignio/letter-case-action@v1
        id: letter_case
        with:
          string: ${{ github.head_ref }}

      # === Create the full app name for docker images and manifests
      - name: Create full app name
        id: app_name
        run: bash ${{ env.UTILITIES }}/create-full-app-name.sh "${{ inputs.app_name }}" "${{ inputs.app_name_postfix }}" "${{ inputs.override_hostname }}" "${{ steps.letter_case.outputs.kebab }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws_role }}
          role-session-name: GithubActionsSession
          aws-region: ${{ env.REGION }}

      - name: Create the kubeconfig
        id: kubeconfig
        shell: bash
        run: |
          # fetch the aws account id
          account_id="$(aws sts get-caller-identity --query Account --output text)"

          # By running this command we are fetching the kube configuration for the github oidc user
          # The OIDC user session is connected to the KubeGithubDeployment role for access to download the configuration
          # Note, this is a short lived kubeconfig.
          aws eks update-kubeconfig --name=${{ env.CLUSTER_NAME }} --region=${{ env.REGION }} --role-arn="arn:aws:iam::$account_id:role/KubeGithubDeployment" --kubeconfig=/tmp/kubeconfig

          kubeconfig="$(cat /tmp/kubeconfig)"

          # A hack to add the multiline configuration as an env variable
          echo "DYNAMIC_KUBECONFIG<<EOF" >> $GITHUB_ENV
          echo "$kubeconfig" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate with Kubernetes
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ env.DYNAMIC_KUBECONFIG }}

      - name: Add kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: "v1.22.0"

      # === This will delete all resources connected to the preview deployment
      - name: Delete the deployment and service
        run: kubectl delete deployments,services,cm,pv,pvc,sc,secrets -l app=${{ steps.app_name.outputs.full_name }} --namespace=${{ env.NAMESPACE }}

      # === This will run a kubectl request to
      # 1. fetch the index of the preview host
      # 2. patch the ingress with what host to remove based on the index
      - name: Remove the host from the preview ingress
        run: bash ${{ env.UTILITIES }}/remove-host-from-preview-ingress.sh ${{ env.NAMESPACE }} ${{ steps.app_name.outputs.full_name }}
