name: Deploy preview
on:
  workflow_call:
    inputs:
      app_name:
        description: The name of the application
        type: string
        required: true
      aws_role:
        description: AWS role to assume during deployment
        type: string
        required: true
      aws_eks_role:
        description: AWS role that is used to deploy on EKS
        type: string
        required: true
      aws_region:
        description: The AWS region where cluster is located
        type: string
        required: true
      cluster_name:
        description: The name of the EKS cluster on which to deploy the preview
        type: string
        required: true
      dockerfile:
        description: The path to the Dockerfile
        type: string
        required: false
      docker_build_args:
        description: Build arguments to pass to the Docker build
        type: string
        required: false
      image_tag:
        description: The tag of the Docker image
        type: string
        required: false
      namespace:
        description: The namespace in which to deploy the preview
        type: string
        required: true
    secrets:
      system_token:
        description: GitHub token
        required: true

    outputs:
      preview_url:
        value: ${{ jobs.setup.outputs.preview_url }}
        description: The URL of the deployed preview

permissions:
  id-token: write
  actions: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.print-preview-url.outputs.preview_url }}
      pr_name: ${{ steps.sanitize_pr_name.outputs.PR_NAME }}
      short_sha: ${{ steps.short_sha.outputs.SHORT_SHA }}
    steps:
      - name: Sanitize pull request Name
        id: sanitize_pr_name
        shell: bash
        run: |
          echo "PR_NAME=pr-$(echo "$GITHUB_REF" | awk -F / '{print $3}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Short SHA
        id: short_sha
        shell: bash
        run: echo "SHORT_SHA=$(echo ${{ github.event.pull_request.base.sha }} | cut -c 1-7)" >> $GITHUB_OUTPUT

      - name: Print preview URL
        id: print-preview-url
        shell: bash
        run: echo "preview_url=https://${{ steps.sanitize_pr_name.outputs.PR_NAME }}-${{ steps.short_sha.outputs.SHORT_SHA }}.preview-new.dignio.dev" >> $GITHUB_OUTPUT

  build_and_push:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ inputs.image_tag == '' }}
    outputs:
      image_tag: ${{ steps.metadata.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role }}
          role-session-name: GithubActionsSession
          aws-region: ${{ inputs.aws_region }}
          mask-aws-account-id: false

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: metadata
        uses: docker/metadata-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          images: |
            ${{ env.ECR_REGISTRY }}/${{ inputs.app_name }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=preview-${{ needs.setup.outputs.pr_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        if: github.event.action != 'closed'
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          provenance: false
          build-args: ${{ inputs.docker_build_args }}
          cache-from: type=registry,ref=${{ steps.metadata.outputs.tags }}
          cache-to: type=inline
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  deploy_on_eks:
    runs-on: ubuntu-latest
    if: always()
    needs: [setup, build_and_push]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws_role }}
          role-session-name: GithubActionsSession
          aws-region: ${{ inputs.aws_region }}
          mask-aws-account-id: false

      - name: Login to AWS ECR
        id: login-ecr
        if: ${{ inputs.image_tag != '' }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if [ -z "${{ inputs.image_tag }}" ]; then
            echo "IMAGE_TAG=${{ needs.build_and_push.outputs.image_tag }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ env.ECR_REGISTRY }}/${{ inputs.app_name }}:${{ inputs.image_tag }}" >> $GITHUB_ENV
          fi

      - name: Checkout Kubernetes repo
        uses: actions/checkout@v4
        with:
          repository: dignio/kubernetes
          ref: DEVEX-356-fix-preview-functionality
          sparse-checkout: |
            argo/cluster/${{ inputs.cluster_name }}/preview/${{ inputs.app_name }}
            argo/base/${{ inputs.app_name }}
          token: ${{ secrets.system_token }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.29.7"

      - name: Generate kubeconfig for EKS and set as ENV
        shell: bash
        run: |
          aws eks update-kubeconfig --name=${{ inputs.cluster_name }} --region=${{ inputs.aws_region }} --role-arn=${{ inputs.aws_eks_role }} --kubeconfig="/tmp/kubeconfig"

          kubeconfig=$(cat /tmp/kubeconfig)

          echo "KUBECONFIG<<EOF" >> $GITHUB_ENV
          echo "$kubeconfig" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate to the EKS cluster
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ env.KUBECONFIG }}

      - name: Update Kustomize manifests
        shell: bash
        working-directory: argo/cluster/${{ inputs.cluster_name }}/preview/${{ inputs.app_name }}
        run: |
          yq e -i '.spec.routes[0].match |= sub("pr-placeholder", "${{ needs.setup.outputs.pr_name }}-${{ needs.setup.outputs.short_sha }}")' routes.yaml
          kustomize edit set namesuffix -- -${{ needs.setup.outputs.pr_name }}
          kustomize edit set image ${{ inputs.app_name }}=${{ env.IMAGE_TAG }}

      # Update the annotation timestamp to trigger a rolling update and image pull
      - name: Update annotation timestamp
        if: github.event.action == 'synchronize'
        shell: bash
        working-directory: argo/cluster/${{ inputs.cluster_name }}/preview/${{ inputs.app_name }}
        run: |
          kustomize edit set annotation kubectl.kubernetes.io/restartedAt:"$(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - name: Create Kubernetes manifests
        id: bake
        uses: azure/k8s-bake@v3
        with:
          renderEngine: "kustomize"
          kustomizationPath: "./argo/cluster/${{ inputs.cluster_name }}/preview/${{ inputs.app_name }}"

      - name: Deploy preview to EKS
        uses: Azure/k8s-deploy@v5
        if: github.event.action != 'closed'
        with:
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          namespace: ${{ inputs.namespace }}
          annotate-namespace: false
          annotate-resources: false

      - name: Remove preview from EKS
        if: github.event.action == 'closed'
        shell: bash
        run: |
          kubectl delete -f ${{ steps.bake.outputs.manifestsBundle }} --namespace=${{ inputs.namespace }}

  preview-status:
    runs-on: ubuntu-latest
    needs: [setup, deploy_on_eks]
    steps:
      - name: Preview Healthcheck
        id: healthcheck
        shell: bash
        run: |
          curl --retry 3 --retry-connrefused --retry-delay 5 --retry-max-time 30 -s -o /dev/null -w "%{http_code}" ${{ needs.setup.outputs.preview_url }}

      - name: Create a PR status
        continue-on-error: true
        uses: octokit/request-action@v2.x
        id: create_commit_status
        with:
          name: "${{ needs.setup.outputs.pr_name }} deploy preview"
          description: Deploy Preview ready! Click Details to browse to it.
          context: "Preview - ${{ needs.setup.outputs.pr_name }}"
          owner: dignio
          repo: ${{ github.event.repository.name }}
          state: success
          accept: application/vnd.github.v3+json
          route: POST /repos/{owner}/{repo}/statuses/{sha}
          target_url: ${{ needs.setup.outputs.preview_url }}
          sha: ${{ github.event.pull_request.head.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.system_token }}
